/** 
* Copyright 2021 Acryl Data, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
plugins {
  id 'base'
  id 'com.palantir.docker'
}

ext {
  python_executable = 'python3'
  venv_name = 'venv'
  docker_registry = 'acryldata'
  docker_repo = 'datahub-actions'
}

if (!project.hasProperty("extra_pip_requirements")) {
  ext.extra_pip_requirements = ""
}

task checkPythonVersion(type: Exec) {
  commandLine python_executable, '-c',
          'import sys; sys.version_info >= (3, 8), f"Python version {sys.version_info[:2]} not allowed"'
}

task environmentSetup(type: Exec, dependsOn: checkPythonVersion) {
  def sentinel_file = "${venv_name}/.venv_environment_sentinel"
  inputs.file file('setup.py')
  outputs.file(sentinel_file)
  commandLine 'bash', '-c',
          "${python_executable} -m venv ${venv_name} && " +
                  "${venv_name}/bin/python -m pip install --upgrade pip uv wheel 'setuptools>=63.0.0' && " +
                  "touch ${sentinel_file}"
}

task installPackage(type: Exec, dependsOn: environmentSetup) {
  def sentinel_file = "${venv_name}/.build_install_package_sentinel"
  inputs.file file('setup.py')
  outputs.file(sentinel_file)
  commandLine 'bash', '-c',
          "source ${venv_name}/bin/activate && set -x && " +
                  "uv pip install -e . ${extra_pip_requirements} && " +
                  "touch ${sentinel_file}"
}

task install(dependsOn: [installPackage])

task installDev(type: Exec, dependsOn: [install]) {
  def sentinel_file = "${venv_name}/.build_install_dev_sentinel"
  inputs.file file('setup.py')
  outputs.file(sentinel_file)
  commandLine 'bash', '-c',
          "source ${venv_name}/bin/activate && set -x && " +
                  "uv pip install -e .[dev] ${extra_pip_requirements} && " +
                  "touch ${sentinel_file}"
}

task lint(type: Exec, dependsOn: installDev) {
  /*
    The find/sed combo below is a temporary work-around for the following mypy issue with airflow 2.2.0:
   "venv/lib/python3.8/site-packages/airflow/_vendor/connexion/spec.py:169: error: invalid syntax".
   */
  commandLine 'bash', '-x', '-c',
    "find ${venv_name}/lib -path *airflow/_vendor/connexion/spec.py -exec sed -i.bak -e '169,169s/  # type: List\\[str\\]//g' {} \\; && " +
    "source ${venv_name}/bin/activate && black --check --diff src/ tests/ && isort --check --diff src/ tests/ && flake8 --count --statistics src/ tests/ && mypy src/ tests/"
}
task lintFix(type: Exec, dependsOn: installDev) {
  commandLine 'bash', '-x', '-c',
    "source ${venv_name}/bin/activate && " +
    "black src/ tests/ && " +
    "isort src/ tests/ && " +
    "flake8 src/ tests/ && " +
    "mypy src/ tests/"
}

task testQuick(type: Exec, dependsOn: installDev) {
  // We can't enforce the coverage requirements if we run a subset of the tests.
  inputs.files(project.fileTree(dir: "src/", include: "**/*.py"))
  inputs.files(project.fileTree(dir: "tests/"))
  outputs.dir("${venv_name}")
  commandLine 'bash', '-x', '-c',
    "source ${venv_name}/bin/activate && pytest -m 'not integration' -vv --continue-on-collection-errors --junit-xml=junit.quick.xml"
}

task installDevTest(type: Exec, dependsOn: [installDev]) {
  inputs.file file('setup.py')
  outputs.dir("${venv_name}")
  outputs.file("${venv_name}/.build_install_dev_test_sentinel")
  commandLine 'bash', '-x', '-c',
    "${venv_name}/bin/pip install -e .[dev,integration-tests] && touch ${venv_name}/.build_install_dev_test_sentinel"
}

def testFile = hasProperty('testFile') ? testFile : 'unknown'
task testSingle(dependsOn: [installDevTest]) {
  doLast {
  if (testFile != 'unknown')  {
  exec {
    commandLine 'bash', '-x', '-c',
     "source ${venv_name}/bin/activate && pytest ${testFile}"
    }
  } else {
   throw new GradleException("No file provided. Use -PtestFile=<test_file>")
    }
  }
}

task testFull(type: Exec, dependsOn: [testQuick, installDevTest]) {
  commandLine 'bash', '-x', '-c',
    "source ${venv_name}/bin/activate && pytest -vv --continue-on-collection-errors --junit-xml=junit.full.xml"
}

task cleanPythonCache(type: Exec) {
  commandLine 'bash', '-x', '-c',
    "find src -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete -o -type d -empty -delete"
}

docker {
  name "${docker_registry}/${docker_repo}:v${version}"
  version "v${version}"
  dockerfile file("${rootProject.projectDir}/docker/datahub-actions/Dockerfile")
  files fileTree(rootProject.projectDir) {
    exclude "datahub-actions/scripts/**"
    exclude "datahub-actions/build/**"
    exclude "datahub-actions/venv/**"
    exclude "datahub-actions/tests/**"
    exclude "**/*.xml"
    include ".dockerignore"
    include "docker/**"
    include "datahub-actions/**"
  }
  // buildArgs([APP_ENV: 'prod-slim'])
}
tasks.getByName('docker').dependsOn('build')

build.dependsOn install
check.dependsOn lint
check.dependsOn testQuick

clean {
  delete venv_name
  delete 'build'
  delete 'dist'
}
clean.dependsOn cleanPythonCache
